{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Directive, Inject, Optional, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { PRIMARY_OUTLET } from '@angular/router';\nimport { EMPTY } from 'rxjs'; // Using a global registry so we can keep it populated across lazy-loaded\n// modules with different parent injectors which create instance of the registry.\n\nconst globalRegistry = [];\n\nclass PrefetchRegistry {\n  constructor(router) {\n    this.router = router;\n    this.trees = globalRegistry;\n  }\n\n  add(tree) {\n    this.trees.push(tree);\n  }\n\n  shouldPrefetch(url) {\n    const tree = this.router.parseUrl(url);\n    return this.trees.some(containsTree.bind(null, tree));\n  }\n\n}\n\nPrefetchRegistry.ɵfac = function PrefetchRegistry_Factory(t) {\n  return new (t || PrefetchRegistry)(i0.ɵɵinject(i1.Router));\n};\n\nPrefetchRegistry.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: PrefetchRegistry,\n  factory: PrefetchRegistry.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PrefetchRegistry, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.Router\n    }];\n  }, null);\n})();\n\nfunction containsQueryParams(container, containee) {\n  // TODO: This does not handle array params correctly.\n  return Object.keys(containee).length <= Object.keys(container).length && Object.keys(containee).every(key => containee[key] === container[key]);\n}\n\nfunction containsTree(containee, container) {\n  return containsQueryParams(container.queryParams, containee.queryParams) && containsSegmentGroup(container.root, containee.root, containee.root.segments);\n}\n\nfunction containsSegmentGroup(container, containee, containeePaths) {\n  if (container.segments.length > containeePaths.length) {\n    const current = container.segments.slice(0, containeePaths.length);\n    if (!equalPath(current, containeePaths)) return false;\n    if (containee.hasChildren()) return false;\n    return true;\n  } else if (container.segments.length === containeePaths.length) {\n    if (!equalPath(container.segments, containeePaths)) return false;\n    if (!containee.hasChildren()) return true;\n\n    for (const c in containee.children) {\n      if (!container.children[c]) break;\n      if (containsSegmentGroup(container.children[c], containee.children[c], containee.children[c].segments)) return true;\n    }\n\n    return false;\n  } else {\n    const current = containeePaths.slice(0, container.segments.length);\n    const next = containeePaths.slice(container.segments.length);\n    if (!equalPath(container.segments, current)) return false;\n    if (!container.children[PRIMARY_OUTLET]) return false;\n    return containsSegmentGroup(container.children[PRIMARY_OUTLET], containee, next);\n  }\n}\n\nfunction equalPath(as, bs) {\n  if (as.length !== bs.length) return false;\n  return as.every((a, i) => a.path === bs[i].path || a.path.startsWith(':') || bs[i].path.startsWith(':'));\n}\n\nconst requestIdleCallback = typeof window !== 'undefined' ? window.requestIdleCallback || function (cb) {\n  const start = Date.now();\n  return setTimeout(function () {\n    cb({\n      didTimeout: false,\n      timeRemaining: function () {\n        return Math.max(0, 50 - (Date.now() - start));\n      }\n    });\n  }, 1);\n} : () => {};\n\nconst observerSupported = () => typeof window !== 'undefined' ? !!window.IntersectionObserver : false;\n\nconst LinkHandler = new InjectionToken('LinkHandler');\n\nclass ObservableLinkHandler {\n  constructor(loader, registry, ngZone) {\n    this.loader = loader;\n    this.registry = registry;\n    this.ngZone = ngZone;\n    this.elementLink = new Map();\n    this.observer = observerSupported() ? new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (!this.observer) {\n          return;\n        }\n\n        if (entry.isIntersecting) {\n          const link = entry.target;\n          const routerLink = this.elementLink.get(link);\n          if (!routerLink || !routerLink.urlTree) return;\n          this.registry.add(routerLink.urlTree);\n          this.observer.unobserve(link);\n          requestIdleCallback(() => {\n            this.loader.preload().subscribe(() => void 0);\n          });\n        }\n      });\n    }) : null;\n  }\n\n  register(el) {\n    this.elementLink.set(el.element, el);\n    this.ngZone.runOutsideAngular(() => {\n      if (!this.observer) {\n        return;\n      }\n\n      this.observer.observe(el.element);\n    });\n  } // First call to unregister will not hit this.\n\n\n  unregister(el) {\n    if (!this.observer) {\n      return;\n    }\n\n    if (this.elementLink.has(el.element)) {\n      this.observer.unobserve(el.element);\n      this.elementLink.delete(el.element);\n    }\n  }\n\n  supported() {\n    return observerSupported();\n  }\n\n}\n\nObservableLinkHandler.ɵfac = function ObservableLinkHandler_Factory(t) {\n  return new (t || ObservableLinkHandler)(i0.ɵɵinject(i1.RouterPreloader), i0.ɵɵinject(PrefetchRegistry), i0.ɵɵinject(i0.NgZone));\n};\n\nObservableLinkHandler.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ObservableLinkHandler,\n  factory: ObservableLinkHandler.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ObservableLinkHandler, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.RouterPreloader\n    }, {\n      type: PrefetchRegistry\n    }, {\n      type: i0.NgZone\n    }];\n  }, null);\n})();\n\nclass PreloadLinkHandler {\n  constructor(loader, registry) {\n    this.loader = loader;\n    this.registry = registry;\n  }\n\n  register(el) {\n    this.registry.add(el.urlTree);\n    requestIdleCallback(() => this.loader.preload().subscribe(() => void 0));\n  }\n\n  unregister(_) {}\n\n  supported() {\n    return true;\n  }\n\n}\n\nPreloadLinkHandler.ɵfac = function PreloadLinkHandler_Factory(t) {\n  return new (t || PreloadLinkHandler)(i0.ɵɵinject(i1.RouterPreloader), i0.ɵɵinject(PrefetchRegistry));\n};\n\nPreloadLinkHandler.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: PreloadLinkHandler,\n  factory: PreloadLinkHandler.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PreloadLinkHandler, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.RouterPreloader\n    }, {\n      type: PrefetchRegistry\n    }];\n  }, null);\n})();\n\nclass LinkDirective {\n  constructor(linkHandlers, el, link, linkWithHref) {\n    this.linkHandlers = linkHandlers;\n    this.el = el;\n    this.linkHandler = this.linkHandlers.filter(h => h.supported()).shift();\n    this.rl = link || linkWithHref;\n\n    if (this.element && this.element.setAttribute) {\n      this.element.setAttribute('ngx-ql', '');\n    }\n  }\n\n  ngOnChanges(c) {\n    if (c['routerLink'] && this.linkHandler) {\n      this.linkHandler.unregister(this);\n      this.linkHandler.register(this);\n    }\n  }\n\n  ngOnDestroy() {\n    if (!this.linkHandler) {\n      return;\n    }\n\n    this.linkHandler.unregister(this);\n  }\n\n  get element() {\n    return this.el.nativeElement;\n  }\n\n  get urlTree() {\n    return this.rl.urlTree;\n  }\n\n}\n\nLinkDirective.ɵfac = function LinkDirective_Factory(t) {\n  return new (t || LinkDirective)(i0.ɵɵdirectiveInject(LinkHandler), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.RouterLink, 8), i0.ɵɵdirectiveInject(i1.RouterLinkWithHref, 8));\n};\n\nLinkDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: LinkDirective,\n  selectors: [[\"\", \"routerLink\", \"\"]],\n  inputs: {\n    routerLink: \"routerLink\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LinkDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[routerLink]'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LinkHandler]\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i1.RouterLink,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i1.RouterLinkWithHref,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    routerLink: [{\n      type: Input\n    }]\n  });\n})();\n\nclass QuicklinkStrategy {\n  constructor(registry, router) {\n    this.registry = registry;\n    this.router = router;\n    this.loading = new Set();\n  }\n\n  preload(route, load) {\n    if (this.loading.has(route)) {\n      // Don't preload the same route twice\n      return EMPTY;\n    }\n\n    const conn = typeof navigator !== 'undefined' ? navigator.connection : undefined;\n\n    if (conn) {\n      // Don't preload if the user is on 2G. or if Save-Data is enabled..\n      if ((conn.effectiveType || '').includes('2g') || conn.saveData) return EMPTY;\n    } // Prevent from preloading\n\n\n    if (route.data && route.data['preload'] === false) {\n      return EMPTY;\n    }\n\n    const fullPath = findPath(this.router.config, route);\n\n    if (this.registry.shouldPrefetch(fullPath)) {\n      this.loading.add(route);\n      return load();\n    }\n\n    return EMPTY;\n  }\n\n}\n\nQuicklinkStrategy.ɵfac = function QuicklinkStrategy_Factory(t) {\n  return new (t || QuicklinkStrategy)(i0.ɵɵinject(PrefetchRegistry), i0.ɵɵinject(i1.Router));\n};\n\nQuicklinkStrategy.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: QuicklinkStrategy,\n  factory: QuicklinkStrategy.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QuicklinkStrategy, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: PrefetchRegistry\n    }, {\n      type: i1.Router\n    }];\n  }, null);\n})();\n\nconst findPath = (config, route) => {\n  config = config.slice();\n  const parent = new Map();\n  const visited = new Set();\n\n  while (config.length) {\n    const el = config.shift();\n\n    if (!el) {\n      continue;\n    }\n\n    visited.add(el);\n    if (el === route) break;\n    let children = el.children || [];\n    const current = el._loadedConfig;\n\n    if (current && current.routes) {\n      children = children.concat(current.routes);\n    }\n\n    children.forEach(r => {\n      if (visited.has(r)) return;\n      parent.set(r, el);\n      config.push(r);\n    });\n  }\n\n  let path = '';\n  let current = route;\n\n  while (current) {\n    if (isPrimaryRoute(current)) {\n      path = `/${current.path}${path}`;\n    } else {\n      path = `/(${current.outlet}:${current.path}${path})`;\n    }\n\n    current = parent.get(current);\n  }\n\n  return path.replace(/\\/\\//, '/');\n};\n\nfunction isPrimaryRoute(route) {\n  return route.outlet === PRIMARY_OUTLET || !route.outlet;\n}\n\nclass QuicklinkModule {}\n\nQuicklinkModule.ɵfac = function QuicklinkModule_Factory(t) {\n  return new (t || QuicklinkModule)();\n};\n\nQuicklinkModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: QuicklinkModule\n});\nQuicklinkModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [{\n    provide: LinkHandler,\n    useClass: ObservableLinkHandler,\n    multi: true\n  }, {\n    provide: LinkHandler,\n    useClass: PreloadLinkHandler,\n    multi: true\n  }, PrefetchRegistry, QuicklinkStrategy]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QuicklinkModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [LinkDirective],\n      providers: [{\n        provide: LinkHandler,\n        useClass: ObservableLinkHandler,\n        multi: true\n      }, {\n        provide: LinkHandler,\n        useClass: PreloadLinkHandler,\n        multi: true\n      }, PrefetchRegistry, QuicklinkStrategy],\n      exports: [LinkDirective]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of ngx-quicklink\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { QuicklinkModule, QuicklinkStrategy, LinkDirective as ɵɵLinkDirective };","map":{"version":3,"names":["i0","Injectable","InjectionToken","Directive","Inject","Optional","Input","NgModule","i1","PRIMARY_OUTLET","EMPTY","globalRegistry","PrefetchRegistry","constructor","router","trees","add","tree","push","shouldPrefetch","url","parseUrl","some","containsTree","bind","ɵfac","Router","ɵprov","type","containsQueryParams","container","containee","Object","keys","length","every","key","queryParams","containsSegmentGroup","root","segments","containeePaths","current","slice","equalPath","hasChildren","c","children","next","as","bs","a","i","path","startsWith","requestIdleCallback","window","cb","start","Date","now","setTimeout","didTimeout","timeRemaining","Math","max","observerSupported","IntersectionObserver","LinkHandler","ObservableLinkHandler","loader","registry","ngZone","elementLink","Map","observer","entries","forEach","entry","isIntersecting","link","target","routerLink","get","urlTree","unobserve","preload","subscribe","register","el","set","element","runOutsideAngular","observe","unregister","has","delete","supported","RouterPreloader","NgZone","PreloadLinkHandler","_","LinkDirective","linkHandlers","linkWithHref","linkHandler","filter","h","shift","rl","setAttribute","ngOnChanges","ngOnDestroy","nativeElement","ElementRef","RouterLink","RouterLinkWithHref","ɵdir","args","selector","undefined","decorators","QuicklinkStrategy","loading","Set","route","load","conn","navigator","connection","effectiveType","includes","saveData","data","fullPath","findPath","config","parent","visited","_loadedConfig","routes","concat","r","isPrimaryRoute","outlet","replace","QuicklinkModule","ɵmod","ɵinj","provide","useClass","multi","declarations","providers","exports","ɵɵLinkDirective"],"sources":["C:/Users/Andrés/Documents/ProyectoAngular/CursoAngularRouter/Angular-router/node_modules/ngx-quicklink/fesm2020/ngx-quicklink.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Directive, Inject, Optional, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { PRIMARY_OUTLET } from '@angular/router';\nimport { EMPTY } from 'rxjs';\n\n// Using a global registry so we can keep it populated across lazy-loaded\n// modules with different parent injectors which create instance of the registry.\nconst globalRegistry = [];\nclass PrefetchRegistry {\n    constructor(router) {\n        this.router = router;\n        this.trees = globalRegistry;\n    }\n    add(tree) {\n        this.trees.push(tree);\n    }\n    shouldPrefetch(url) {\n        const tree = this.router.parseUrl(url);\n        return this.trees.some(containsTree.bind(null, tree));\n    }\n}\nPrefetchRegistry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: PrefetchRegistry, deps: [{ token: i1.Router }], target: i0.ɵɵFactoryTarget.Injectable });\nPrefetchRegistry.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: PrefetchRegistry });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: PrefetchRegistry, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.Router }]; } });\nfunction containsQueryParams(container, containee) {\n    // TODO: This does not handle array params correctly.\n    return (Object.keys(containee).length <= Object.keys(container).length &&\n        Object.keys(containee).every(key => containee[key] === container[key]));\n}\nfunction containsTree(containee, container) {\n    return (containsQueryParams(container.queryParams, containee.queryParams) &&\n        containsSegmentGroup(container.root, containee.root, containee.root.segments));\n}\nfunction containsSegmentGroup(container, containee, containeePaths) {\n    if (container.segments.length > containeePaths.length) {\n        const current = container.segments.slice(0, containeePaths.length);\n        if (!equalPath(current, containeePaths))\n            return false;\n        if (containee.hasChildren())\n            return false;\n        return true;\n    }\n    else if (container.segments.length === containeePaths.length) {\n        if (!equalPath(container.segments, containeePaths))\n            return false;\n        if (!containee.hasChildren())\n            return true;\n        for (const c in containee.children) {\n            if (!container.children[c])\n                break;\n            if (containsSegmentGroup(container.children[c], containee.children[c], containee.children[c].segments))\n                return true;\n        }\n        return false;\n    }\n    else {\n        const current = containeePaths.slice(0, container.segments.length);\n        const next = containeePaths.slice(container.segments.length);\n        if (!equalPath(container.segments, current))\n            return false;\n        if (!container.children[PRIMARY_OUTLET])\n            return false;\n        return containsSegmentGroup(container.children[PRIMARY_OUTLET], containee, next);\n    }\n}\nfunction equalPath(as, bs) {\n    if (as.length !== bs.length)\n        return false;\n    return as.every((a, i) => a.path === bs[i].path || a.path.startsWith(':') || bs[i].path.startsWith(':'));\n}\n\nconst requestIdleCallback = typeof window !== 'undefined'\n    ? window.requestIdleCallback ||\n        function (cb) {\n            const start = Date.now();\n            return setTimeout(function () {\n                cb({\n                    didTimeout: false,\n                    timeRemaining: function () {\n                        return Math.max(0, 50 - (Date.now() - start));\n                    }\n                });\n            }, 1);\n        }\n    : () => { };\nconst observerSupported = () => typeof window !== 'undefined' ? !!window.IntersectionObserver : false;\nconst LinkHandler = new InjectionToken('LinkHandler');\nclass ObservableLinkHandler {\n    constructor(loader, registry, ngZone) {\n        this.loader = loader;\n        this.registry = registry;\n        this.ngZone = ngZone;\n        this.elementLink = new Map();\n        this.observer = observerSupported()\n            ? new IntersectionObserver(entries => {\n                entries.forEach(entry => {\n                    if (!this.observer) {\n                        return;\n                    }\n                    if (entry.isIntersecting) {\n                        const link = entry.target;\n                        const routerLink = this.elementLink.get(link);\n                        if (!routerLink || !routerLink.urlTree)\n                            return;\n                        this.registry.add(routerLink.urlTree);\n                        this.observer.unobserve(link);\n                        requestIdleCallback(() => {\n                            this.loader.preload().subscribe(() => void 0);\n                        });\n                    }\n                });\n            })\n            : null;\n    }\n    register(el) {\n        this.elementLink.set(el.element, el);\n        this.ngZone.runOutsideAngular(() => {\n            if (!this.observer) {\n                return;\n            }\n            this.observer.observe(el.element);\n        });\n    }\n    // First call to unregister will not hit this.\n    unregister(el) {\n        if (!this.observer) {\n            return;\n        }\n        if (this.elementLink.has(el.element)) {\n            this.observer.unobserve(el.element);\n            this.elementLink.delete(el.element);\n        }\n    }\n    supported() {\n        return observerSupported();\n    }\n}\nObservableLinkHandler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: ObservableLinkHandler, deps: [{ token: i1.RouterPreloader }, { token: PrefetchRegistry }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nObservableLinkHandler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: ObservableLinkHandler });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: ObservableLinkHandler, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.RouterPreloader }, { type: PrefetchRegistry }, { type: i0.NgZone }]; } });\nclass PreloadLinkHandler {\n    constructor(loader, registry) {\n        this.loader = loader;\n        this.registry = registry;\n    }\n    register(el) {\n        this.registry.add(el.urlTree);\n        requestIdleCallback(() => this.loader.preload().subscribe(() => void 0));\n    }\n    unregister(_) { }\n    supported() {\n        return true;\n    }\n}\nPreloadLinkHandler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: PreloadLinkHandler, deps: [{ token: i1.RouterPreloader }, { token: PrefetchRegistry }], target: i0.ɵɵFactoryTarget.Injectable });\nPreloadLinkHandler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: PreloadLinkHandler });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: PreloadLinkHandler, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.RouterPreloader }, { type: PrefetchRegistry }]; } });\n\nclass LinkDirective {\n    constructor(linkHandlers, el, link, linkWithHref) {\n        this.linkHandlers = linkHandlers;\n        this.el = el;\n        this.linkHandler = this.linkHandlers.filter(h => h.supported()).shift();\n        this.rl = link || linkWithHref;\n        if (this.element && this.element.setAttribute) {\n            this.element.setAttribute('ngx-ql', '');\n        }\n    }\n    ngOnChanges(c) {\n        if (c['routerLink'] && this.linkHandler) {\n            this.linkHandler.unregister(this);\n            this.linkHandler.register(this);\n        }\n    }\n    ngOnDestroy() {\n        if (!this.linkHandler) {\n            return;\n        }\n        this.linkHandler.unregister(this);\n    }\n    get element() {\n        return this.el.nativeElement;\n    }\n    get urlTree() {\n        return this.rl.urlTree;\n    }\n}\nLinkDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: LinkDirective, deps: [{ token: LinkHandler }, { token: i0.ElementRef }, { token: i1.RouterLink, optional: true }, { token: i1.RouterLinkWithHref, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nLinkDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.4\", type: LinkDirective, selector: \"[routerLink]\", inputs: { routerLink: \"routerLink\" }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: LinkDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[routerLink]'\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [LinkHandler]\n                }] }, { type: i0.ElementRef }, { type: i1.RouterLink, decorators: [{\n                    type: Optional\n                }] }, { type: i1.RouterLinkWithHref, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { routerLink: [{\n                type: Input\n            }] } });\n\nclass QuicklinkStrategy {\n    constructor(registry, router) {\n        this.registry = registry;\n        this.router = router;\n        this.loading = new Set();\n    }\n    preload(route, load) {\n        if (this.loading.has(route)) {\n            // Don't preload the same route twice\n            return EMPTY;\n        }\n        const conn = typeof navigator !== 'undefined' ? navigator.connection : undefined;\n        if (conn) {\n            // Don't preload if the user is on 2G. or if Save-Data is enabled..\n            if ((conn.effectiveType || '').includes('2g') || conn.saveData)\n                return EMPTY;\n        }\n        // Prevent from preloading\n        if (route.data && route.data['preload'] === false) {\n            return EMPTY;\n        }\n        const fullPath = findPath(this.router.config, route);\n        if (this.registry.shouldPrefetch(fullPath)) {\n            this.loading.add(route);\n            return load();\n        }\n        return EMPTY;\n    }\n}\nQuicklinkStrategy.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: QuicklinkStrategy, deps: [{ token: PrefetchRegistry }, { token: i1.Router }], target: i0.ɵɵFactoryTarget.Injectable });\nQuicklinkStrategy.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: QuicklinkStrategy });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: QuicklinkStrategy, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: PrefetchRegistry }, { type: i1.Router }]; } });\nconst findPath = (config, route) => {\n    config = config.slice();\n    const parent = new Map();\n    const visited = new Set();\n    while (config.length) {\n        const el = config.shift();\n        if (!el) {\n            continue;\n        }\n        visited.add(el);\n        if (el === route)\n            break;\n        let children = el.children || [];\n        const current = el._loadedConfig;\n        if (current && current.routes) {\n            children = children.concat(current.routes);\n        }\n        children.forEach((r) => {\n            if (visited.has(r))\n                return;\n            parent.set(r, el);\n            config.push(r);\n        });\n    }\n    let path = '';\n    let current = route;\n    while (current) {\n        if (isPrimaryRoute(current)) {\n            path = `/${current.path}${path}`;\n        }\n        else {\n            path = `/(${current.outlet}:${current.path}${path})`;\n        }\n        current = parent.get(current);\n    }\n    return path.replace(/\\/\\//, '/');\n};\nfunction isPrimaryRoute(route) {\n    return route.outlet === PRIMARY_OUTLET || !route.outlet;\n}\n\nclass QuicklinkModule {\n}\nQuicklinkModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: QuicklinkModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nQuicklinkModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.4\", ngImport: i0, type: QuicklinkModule, declarations: [LinkDirective], exports: [LinkDirective] });\nQuicklinkModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: QuicklinkModule, providers: [\n        {\n            provide: LinkHandler,\n            useClass: ObservableLinkHandler,\n            multi: true\n        },\n        {\n            provide: LinkHandler,\n            useClass: PreloadLinkHandler,\n            multi: true\n        },\n        PrefetchRegistry,\n        QuicklinkStrategy\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: QuicklinkModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [LinkDirective],\n                    providers: [\n                        {\n                            provide: LinkHandler,\n                            useClass: ObservableLinkHandler,\n                            multi: true\n                        },\n                        {\n                            provide: LinkHandler,\n                            useClass: PreloadLinkHandler,\n                            multi: true\n                        },\n                        PrefetchRegistry,\n                        QuicklinkStrategy\n                    ],\n                    exports: [LinkDirective]\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-quicklink\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { QuicklinkModule, QuicklinkStrategy, LinkDirective as ɵɵLinkDirective };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}