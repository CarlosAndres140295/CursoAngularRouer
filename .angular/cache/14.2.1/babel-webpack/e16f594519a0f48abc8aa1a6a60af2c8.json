{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { retry, catchError, map } from 'rxjs/operators';\nimport { throwError, zip } from 'rxjs';\nimport { checkTime } from './../interceptors/time.interceptor';\nimport { environment } from './../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProductsService = /*#__PURE__*/(() => {\n  class ProductsService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = `${environment.API_URL}/api`;\n    }\n\n    getAll(limit, offset) {\n      let params = new HttpParams();\n\n      if (limit && offset != null) {\n        params = params.set('limit', limit);\n        params = params.set('offset', offset);\n      }\n\n      return this.http.get(`${this.apiUrl}/products/`, {\n        params,\n        context: checkTime()\n      }).pipe(retry(3), map(products => products.map(item => {\n        return { ...item,\n          taxes: .19 * item.price\n        };\n      })));\n    }\n\n    getByCategory(categoryId, limit, offset) {\n      let params = new HttpParams();\n\n      if (limit && offset != null) {\n        params = params.set('limit', limit);\n        params = params.set('offset', offset);\n      }\n\n      return this.http.get(`${this.apiUrl}/categories/${categoryId}/products`, {\n        params\n      });\n    }\n\n    fetchReadAndUpdate(id, dto) {\n      return zip(this.getProductById(id), this.update(id, dto));\n    }\n\n    getProductById(id) {\n      return this.http.get(`${this.apiUrl}/products/${id}`).pipe(catchError(error => {\n        if (error.status === 409\n        /* HttpStatusCode.Conflict */\n        ) {\n          return throwError('Algo esta fallando en el server');\n        }\n\n        if (error.status === 404\n        /* HttpStatusCode.NotFound */\n        ) {\n          return throwError('El producto no existe');\n        }\n\n        if (error.status === 401\n        /* HttpStatusCode.Unauthorized */\n        ) {\n          return throwError('No estas permitido');\n        }\n\n        return throwError('Ups algo salio mal');\n      }));\n    }\n\n    create(dto) {\n      return this.http.post(`${this.apiUrl}/products/`, dto);\n    }\n\n    update(id, dto) {\n      return this.http.put(`${this.apiUrl}/products/${id}`, dto);\n    }\n\n    delete(id) {\n      return this.http.delete(`${this.apiUrl}/products/${id}`);\n    }\n\n  }\n\n  ProductsService.ɵfac = function ProductsService_Factory(t) {\n    return new (t || ProductsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ProductsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductsService,\n    factory: ProductsService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductsService;\n})();","map":null,"metadata":{},"sourceType":"module"}